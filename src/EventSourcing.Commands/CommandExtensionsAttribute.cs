using System;
using System.Reactive;

namespace EventSourcing.Commands;

/// <summary>
/// Use this attribute on a static partial class. 
/// Useful extensions and command processor base classes for result and error type are added by the source generator shipped with EventSourcing.Commands.
/// </summary>
/// <typeparam name="TResult">Result type corresponding to TError. Has to implement EventSourcing.Commands.IResult(of T, of TError, of TResult), which is automatically working with result types generated by FunicularSwitch.Generators package</typeparam>
/// <typeparam name="TError">Type use to represent errors in CommandProcessors. Has to implement EventSourcing.Commands.IError</typeparam>
[AttributeUsage(AttributeTargets.Class, Inherited = false)]
public class CommandExtensionsAttribute<TResult, TError> : Attribute
    where TError : IError<TError>
    where TResult : IResult<Unit, TError, TResult>;

/// <summary>
/// Use this attribute on a static partial class. 
/// Useful extensions and command processor base classes for your error type are added by the source generator shipped with EventSourcing.Commands.
/// </summary>
/// <typeparam name="TError">Type used to represent errors in CommandProcessors</typeparam>
[AttributeUsage(AttributeTargets.Class, Inherited = false)]
public class CommandExtensionsAttribute<TError> : Attribute;